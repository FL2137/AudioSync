#include "AudioSync.h"
AudioSync::AudioSync(QWidget *parent)
    : QMainWindow(parent)
{

    const int size = 1764 + 1; //standard packet length generated by IAudioCaptureClient
    ///////////2420208
    captureBuffer.resize(size);
    captureBuffer.fill(0);

    renderBuffer.resize(size);
    renderBuffer.fill(0);

    ui.setupUi(this);

    ui.portLineEdit->setText("3002");
    ui.hostLineEdit->setText("192.168.1.109");

    capturer = new AudioCapture();
    renderer = new AudioRender();

    capturer->moveToThread(&captureThread);
    connect(ui.recordButton, &QPushButton::clicked, this, &AudioSync::startRecording);
    connect(this, &AudioSync::runRecordingThread, capturer, &AudioCapture::winAudioCapture);
    connect(capturer, &AudioCapture::bufferFilled, this, &AudioSync::signalFilled);
    captureThread.start();

    renderer->moveToThread(&renderThread);
    connect(ui.playButton, &QPushButton::clicked, this, &AudioSync::startPlaying);
    connect(this, &AudioSync::runRenderingThread, renderer, &AudioRender::render);
    renderThread.start();

    connect(ui.connectButton, &QPushButton::clicked, this, [this]() {
        server = new UdpServer(&renderBuffer, ui.portLineEdit->text().toShort(), ui.hostLineEdit->text());
        capturer->setServer(server);
        server->readPendingData();

        ui.connectButton->setEnabled(false);
    });


    listAudioDevices();
}

AudioSync::~AudioSync() {

    renderThread.quit();
    renderThread.wait();

    captureThread.quit();
    captureThread.wait();

    //lala
    delete server;
    delete capturer;
    delete renderer;
}

//functions

void AudioSync::listAudioDevices() {
    auto deviceList = QMediaDevices::audioOutputs();
    for (auto& device : deviceList) {
        qDebug() << device.description();
        
        ui.devicesList->addItem(device.description());

        AudioFormat af(device);
        QAudioFormat defaultFormat;
        defaultFormat.setSampleRate(44100);
        defaultFormat.setSampleFormat(QAudioFormat::Int16);
        defaultFormat.setChannelCount(2);
        if (device.isFormatSupported(defaultFormat)) {
            qDebug() << "default format supported";
        }
        else
            qDebug() << "default format NOT supported";
    }
}

//slots and signals
void AudioSync::startPlaying() {
    emit runRenderingThread(&renderBuffer);
}

void AudioSync::startRecording() {
    emit runRecordingThread(&captureBuffer);
}

void AudioSync::signalFilled() { 
    QHostAddress addr("192.168.1.109");
    server->sendDatagram(&this->captureBuffer, addr, 3002);
}
